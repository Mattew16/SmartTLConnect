D G "__PCM__" 0 243 ""5.056d""
D G "__DEVICE__" 0 243 "628"
D G "__DATE__" 0 243 ""18-May-16""
D G "__TIME__" 0 243 ""09:37:29""
D G "_UNICODE" 0 243 ""?""
D G "__EVAL" 0 243 ""?""
D G "led2sinal" 0 2 "pin_b5"
D G "ledpower" 0 3 "pin_a6"
D G "blinkingMode_signal" 0 5 "pin_b3"
D G "blinkingMode" 0 6 "pin_a3"
D G "blinkingMode2" 0 7 "pin_a4"
D G "jca" 0 8 "pin_b6"
D G "power" 0 9 "pin_b0"
D G "BUFFER_SIZE" 0 10 "60" "Buffer size you can adjust this size"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `53 
f B "set_tris_a" 1 37 "void(int8 value)" `52 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `55 
f B "set_tris_b" 1 38 "void(int8 value)" `54 
f N "get_tris_a" 1 39 ""
f B "get_tris_a" 1 39 "int8()" `56 
f N "get_tris_b" 1 40 ""
f B "get_tris_b" 1 40 "int8()" `57 
f N "output_a" 1 41 ""
v L "value" 1 41 "int8" `59 
f B "output_a" 1 41 "void(int8 value)" `58 
f N "output_b" 1 42 ""
v L "value" 1 42 "int8" `61 
f B "output_b" 1 42 "void(int8 value)" `60 
f N "input_a" 1 43 ""
f B "input_a" 1 43 "int8()" `62 
f N "input_b" 1 44 ""
f B "input_b" 1 44 "int8()" `63 
f N "input_change_a" 1 45 ""
f B "input_change_a" 1 45 "int8()" `64 
f N "input_change_b" 1 46 ""
f B "input_change_b" 1 46 "int8()" `65 
f N "port_b_pullups" 1 47 ""
v L "value" 1 47 "int8" `67 
f B "port_b_pullups" 1 47 "void(int8 value)" `66 
f N "input" 1 48 ""
v L "pin" 1 48 "int16" `69 
f B "input" 1 48 "int8(int16 pin)" `68 
f N "input_state" 1 49 ""
v L "pin" 1 49 "int16" `71 
f B "input_state" 1 49 "int8(int16 pin)" `70 
f N "output_low" 1 50 ""
v L "pin" 1 50 "int16" `73 
f B "output_low" 1 50 "void(int16 pin)" `72 
f N "output_high" 1 51 ""
v L "pin" 1 51 "int16" `75 
f B "output_high" 1 51 "void(int16 pin)" `74 
f N "output_toggle" 1 52 ""
v L "pin" 1 52 "int16" `77 
f B "output_toggle" 1 52 "void(int16 pin)" `76 
f N "output_bit" 1 53 ""
v L "pin" 1 53 "int16" `79 
v L "level" 1 53 "int8" `80 
f B "output_bit" 1 53 "void(int16 pin,int8 level)" `78 
f N "output_float" 1 54 ""
v L "pin" 1 54 "int16" `82 
f B "output_float" 1 54 "void(int16 pin)" `81 
f N "output_drive" 1 55 ""
v L "pin" 1 55 "int16" `84 
f B "output_drive" 1 55 "void(int16 pin)" `83  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 59 "40"
d G "PIN_A1" 1 60 "41"
d G "PIN_A2" 1 61 "42"
d G "PIN_A3" 1 62 "43"
d G "PIN_A4" 1 63 "44"
d G "PIN_A5" 1 64 "45"
d G "PIN_A6" 1 65 "46"
d G "PIN_A7" 1 66 "47"
d G "PIN_B0" 1 68 "48"
d G "PIN_B1" 1 69 "49"
d G "PIN_B2" 1 70 "50"
d G "PIN_B3" 1 71 "51"
d G "PIN_B4" 1 72 "52"
d G "PIN_B5" 1 73 "53"
d G "PIN_B6" 1 74 "54"
d G "PIN_B7" 1 75 "55"
d G "FALSE" 1 78 "0"
d G "TRUE" 1 79 "1"
d G "BYTE" 1 81 "int8"
d G "BOOLEAN" 1 82 "int1"
d G "getc" 1 84 "getch"
d G "fgetc" 1 85 "getch"
d G "getchar" 1 86 "getch"
d G "putc" 1 87 "putchar"
d G "fputc" 1 88 "putchar"
d G "fgets" 1 89 "gets"
d G "fputs" 1 90 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 95 ""
f B "restart_cause" 1 95 "int8()" `85 
f N "reset_cpu" 1 96 ""
f B "reset_cpu" 1 96 "void()" `86 
f N "sleep" 1 97 ""
f B "sleep" 1 97 "void()" `87  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 99 "3"
d G "WDT_TIMEOUT" 1 100 "11"
d G "MCLR_FROM_SLEEP" 1 101 "19"
d G "MCLR_FROM_RUN" 1 102 "27"
d G "NORMAL_POWER_UP" 1 103 "25"
d G "BROWNOUT_RESTART" 1 104 "26"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 111 ""
v L "mode" 1 111 "int8" `89 
f B "setup_timer_0" 1 111 "void(int8 mode)" `88 
f N "set_timer0" 1 112 ""
v L "value" 1 112 "int8" `91 
f B "set_timer0" 1 112 "void(int8 value)" `90 
f N "get_timer0" 1 113 ""
f B "get_timer0" 1 113 "int8()" `92 
f N "setup_counters" 1 114 ""
v L "mode" 1 114 "int8" `94 
v L "prescaler" 1 114 "int8" `95 
f B "setup_counters" 1 114 "void(int8 mode,int8 prescaler)" `93 
f N "set_rtcc" 1 115 ""
v L "value" 1 115 "int8" `97 
f B "set_rtcc" 1 115 "void(int8 value)" `96 
f N "get_rtcc" 1 116 ""
f B "get_rtcc" 1 116 "int8()" `98  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 118 "0"
d G "T0_EXT_L_TO_H" 1 119 "32"
d G "T0_EXT_H_TO_L" 1 120 "48"
d G "T0_DIV_1" 1 122 "8"
d G "T0_DIV_2" 1 123 "0"
d G "T0_DIV_4" 1 124 "1"
d G "T0_DIV_8" 1 125 "2"
d G "T0_DIV_16" 1 126 "3"
d G "T0_DIV_32" 1 127 "4"
d G "T0_DIV_64" 1 128 "5"
d G "T0_DIV_128" 1 129 "6"
d G "T0_DIV_256" 1 130 "7"
d G "T0_8_BIT" 1 133 "0"
d G "RTCC_INTERNAL" 1 137 "0"
d G "RTCC_EXT_L_TO_H" 1 138 "32"
d G "RTCC_EXT_H_TO_L" 1 139 "48"
d G "RTCC_DIV_1" 1 140 "8"
d G "RTCC_DIV_2" 1 141 "0"
d G "RTCC_DIV_4" 1 142 "1"
d G "RTCC_DIV_8" 1 143 "2"
d G "RTCC_DIV_16" 1 144 "3"
d G "RTCC_DIV_32" 1 145 "4"
d G "RTCC_DIV_64" 1 146 "5"
d G "RTCC_DIV_128" 1 147 "6"
d G "RTCC_DIV_256" 1 148 "7"
d G "RTCC_8_BIT" 1 149 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 160 ""
v L "mode" 1 160 "int16" `100 
f B "setup_wdt" 1 160 "void(int16 mode)" `99 
f N "restart_wdt" 1 161 ""
f B "restart_wdt" 1 161 "void()" `101  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 164 "8"
d G "WDT_36MS" 1 165 "9"
d G "WDT_72MS" 1 166 "10"
d G "WDT_144MS" 1 167 "11"
d G "WDT_288MS" 1 168 "12"
d G "WDT_576MS" 1 169 "13"
d G "WDT_1152MS" 1 170 "14"
d G "WDT_2304MS" 1 171 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 177 ""
v L "mode" 1 177 "int16" `103 
f B "setup_timer_1" 1 177 "void(int16 mode)" `102 
f N "get_timer1" 1 178 ""
f B "get_timer1" 1 178 "int16()" `104 
f N "set_timer1" 1 179 ""
v L "value" 1 179 "int16" `106 
f B "set_timer1" 1 179 "void(int16 value)" `105  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 182 "0"
d G "T1_INTERNAL" 1 183 "0x85"
d G "T1_EXTERNAL" 1 184 "0x87"
d G "T1_EXTERNAL_SYNC" 1 185 "0x83"
d G "T1_CLK_OUT" 1 187 "8"
d G "T1_DIV_BY_1" 1 189 "0"
d G "T1_DIV_BY_2" 1 190 "0x10"
d G "T1_DIV_BY_4" 1 191 "0x20"
d G "T1_DIV_BY_8" 1 192 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_timer_2" 1 197 ""
v L "mode" 1 197 "int8" `108 
v L "period" 1 197 "int8" `109 
v L "postscale" 1 197 "int8" `110 
f B "setup_timer_2" 1 197 "void(int8 mode,int8 period,int8 postscale)" `107 
f N "get_timer2" 1 198 ""
f B "get_timer2" 1 198 "int8()" `111 
f N "set_timer2" 1 199 ""
v L "value" 1 199 "int8" `113 
f B "set_timer2" 1 199 "void(int8 value)" `112  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 201 "0"
d G "T2_DIV_BY_1" 1 202 "4"
d G "T2_DIV_BY_4" 1 203 "5"
d G "T2_DIV_BY_16" 1 204 "6"
c L "set_timer2" 1 1 4 "FUNCTION"
f N "setup_ccp1" 1 210 ""
v L "mode" 1 210 "int32" `115 
f B "setup_ccp1" 1 210 "void(int32 mode)" `114 
f N "setup_ccp1" 1 211 ""
v L "mode" 1 211 "int32" `117 
v L "pwm" 1 211 "int8" `118 
f B "setup_ccp1" 1 211 "void(int32 mode,int8 pwm)" `116 
f N "set_pwm1_duty" 1 212 ""
v L "value" 1 212 "int16" `120 
f B "set_pwm1_duty" 1 212 "void(int16 value)" `119  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 214 "0"
d G "CCP_CAPTURE_FE" 1 215 "0x04"
d G "CCP_CAPTURE_RE" 1 216 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 217 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 218 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 219 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 220 "0x09"
d G "CCP_COMPARE_INT" 1 221 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 222 "0x0B"
d G "CCP_PWM" 1 223 "0x0C"
d G "CCP_PWM_PLUS_1" 1 224 "0x1c"
d G "CCP_PWM_PLUS_2" 1 225 "0x2c"
d G "CCP_PWM_PLUS_3" 1 226 "0x3c"
c L "set_pwm1_duty" 1 1 2 "FUNCTION"
f N "setup_uart" 1 233 ""
v L "baud" 1 233 "int32" `125 
f B "setup_uart" 1 233 "void(int32 baud)" `124 
f N "setup_uart" 1 234 ""
v L "baud" 1 234 "int32" `127 
v L "stream" 1 234 "int8" `128 
f B "setup_uart" 1 234 "void(int32 baud,int8 stream)" `126 
f N "setup_uart" 1 235 ""
v L "baud" 1 235 "int32" `130 
v L "stream" 1 235 "int8" `131 
v L "clock" 1 235 "int32" `132 
f B "setup_uart" 1 235 "void(int32 baud,int8 stream,int32 clock)" `129 
f N "set_uart_speed" 1 236 ""
v L "baud" 1 236 "int32" `134 
f B "set_uart_speed" 1 236 "void(int32 baud)" `133 
f N "set_uart_speed" 1 237 ""
v L "baud" 1 237 "int32" `136 
v L "stream" 1 237 "int8" `137 
f B "set_uart_speed" 1 237 "void(int32 baud,int8 stream)" `135 
f N "set_uart_speed" 1 238 ""
v L "baud" 1 238 "int32" `139 
v L "stream" 1 238 "int8" `140 
v L "clock" 1 238 "int32" `141 
f B "set_uart_speed" 1 238 "void(int32 baud,int8 stream,int32 clock)" `138  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 242 "2"
d G "UART_DATA" 1 243 "4"
c L "set_uart_speed" 1 1 3 "FUNCTION"
f N "setup_comparator" 1 247 ""
v L "mode" 1 247 "int32" `143 
f B "setup_comparator" 1 247 "void(int32 mode)" `142  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A2" 1 249 "0xfff04"
d G "A0_A2_A1_A2" 1 250 "0x7ff03"
d G "NC_NC_A1_A2" 1 251 "0x6ff05"
d G "NC_NC_NC_NC" 1 252 "0x0ff07"
d G "A0_VR_A1_VR" 1 253 "0x3ff02"
d G "A3_VR_A2_VR" 1 254 "0xcff0A"
d G "A0_A2_A1_A2_OUT_ON_A3_A4" 1 255 "0x7e706"
d G "A3_A2_A1_A2" 1 256 "0xeff09"
d G "CP1_INVERT" 1 257 "0x00010"
d G "CP2_INVERT" 1 258 "0x00020"
c L "setup_comparator" 1 1 2 "FUNCTION"
f N "setup_vref" 1 265 ""
v L "mode" 1 265 "int8" `147 
f B "setup_vref" 1 265 "void(int8 mode)" `146  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 267 "0xa0"
d G "VREF_HIGH" 1 268 "0x80"
d G "VREF_A2" 1 270 "0x40"
c L "setup_vref" 1 1 2 "FUNCTION"
f N "setup_oscillator" 1 274 ""
v L "mode" 1 274 "int8" `149 
f B "setup_oscillator" 1 274 "void(int8 mode)" `148  "Constants used in setup_oscillator() are:"
d G "OSC_48KHZ" 1 276 "0"
d G "OSC_4MHZ" 1 277 "8"
c L "setup_oscillator" 1 1 3 "FUNCTION"
f N "abs" 1 283 ""
v L "x" 1 283 "sint8" `151 
f B "abs" 1 283 "sint8(sint8 x)" `150 
f N "abs" 1 284 ""
v L "x" 1 284 "sint16" `153 
f B "abs" 1 284 "sint16(sint16 x)" `152 
f N "abs" 1 285 ""
v L "x" 1 285 "sint32" `155 
f B "abs" 1 285 "sint32(sint32 x)" `154 
f N "abs" 1 286 ""
v L "x" 1 286 "float" `157 
f B "abs" 1 286 "float(float x)" `156 
f N "_mul" 1 287 ""
v L "??65535" 1 287 "int8" `159 
v L "??65535" 1 287 "int8" `160 
f B "_mul" 1 287 "int16(int8 ,int8 )" `158 
f N "_mul" 1 288 ""
v L "??65535" 1 288 "sint8" `162 
v L "??65535" 1 288 "sint8" `163 
f B "_mul" 1 288 "sint16(sint8 ,sint8 )" `161 
f N "_mul" 1 289 ""
v L "??65535" 1 289 "int16" `165 
v L "??65535" 1 289 "int16" `166 
f B "_mul" 1 289 "int32(int16 ,int16 )" `164 
f N "_mul" 1 290 ""
v L "??65535" 1 290 "sint16" `168 
v L "??65535" 1 290 "sint16" `169 
f B "_mul" 1 290 "sint32(sint16 ,sint16 )" `167  "Memory Manipulation Prototypes:"
f N "read_bank" 1 293 ""
v L "bank" 1 293 "int8" `171 
v L "offset" 1 293 "int8" `172 
f B "read_bank" 1 293 "int8(int8 bank,int8 offset)" `170 
f N "write_bank" 1 294 ""
v L "bank" 1 294 "int8" `174 
v L "offset" 1 294 "int8" `175 
v L "value" 1 294 "int8" `176 
f B "write_bank" 1 294 "void(int8 bank,int8 offset,int8 value)" `173 
f N "strcpy" 1 295 ""
v L "dest" 1 295 "*int8" `178 
v L "src" 1 295 "*int8" `179 
f B "strcpy" 1 295 "void(*int8 dest,*int8 src)" `177 
f N "memset" 1 296 ""
v L "destination" 1 296 "*int8" `181 
v L "value" 1 296 "int8" `182 
v L "num" 1 296 "int16" `183 
f B "memset" 1 296 "void(*int8 destination,int8 value,int16 num)" `180 
f N "memcpy" 1 297 ""
v L "destination" 1 297 "*int8" `185 
v L "source" 1 297 "*int8" `186 
v L "num" 1 297 "int16" `187 
f B "memcpy" 1 297 "void(*int8 destination,*int8 source,int16 num)" `184  "String Prototypes:"
f N "toupper" 1 300 ""
v L "cvalue" 1 300 "int8" `189 
f B "toupper" 1 300 "int8(int8 cvalue)" `188 
f N "tolower" 1 301 ""
v L "cvalue" 1 301 "int8" `191 
f B "tolower" 1 301 "int8(int8 cvalue)" `190 
f N "sprintf" 1 302 ""
v L "string" 1 302 "*int8" `193 
v L "cstring" 1 302 "*int8" `194 
f B "sprintf" 1 302 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `192  "Data Manipulators Prototypes:"
f N "shift_left" 1 305 ""
v L "address" 1 305 "*int8" `197 
v L "bytes" 1 305 "int8" `198 
v L "value" 1 305 "int8" `199 
f B "shift_left" 1 305 "int8(*int8 address,int8 bytes,int8 value)" `196 
f N "shift_right" 1 306 ""
v L "address" 1 306 "*int8" `201 
v L "bytes" 1 306 "int8" `202 
v L "value" 1 306 "int8" `203 
f B "shift_right" 1 306 "int8(*int8 address,int8 bytes,int8 value)" `200 
f N "rotate_left" 1 307 ""
v L "address" 1 307 "*int8" `205 
v L "bytes" 1 307 "int8" `206 
f B "rotate_left" 1 307 "void(*int8 address,int8 bytes)" `204 
f N "rotate_right" 1 308 ""
v L "address" 1 308 "*int8" `208 
v L "bytes" 1 308 "int8" `209 
f B "rotate_right" 1 308 "void(*int8 address,int8 bytes)" `207 
f N "swap" 1 309 ""
v L "value" 1 309 "int8" `211 
f B "swap" 1 309 "void(int8 value)" `210 
f N "make8" 1 310 ""
v L "var" 1 310 "int16" `213 
v L "offset" 1 310 "int8" `214 
f B "make8" 1 310 "int8(int16 var,int8 offset)" `212 
f N "make8" 1 311 ""
v L "var" 1 311 "int32" `216 
v L "offset" 1 311 "int8" `217 
f B "make8" 1 311 "int8(int32 var,int8 offset)" `215 
f N "make16" 1 312 ""
v L "varhigh" 1 312 "int8" `219 
v L "varlow" 1 312 "int8" `220 
f B "make16" 1 312 "int16(int8 varhigh,int8 varlow)" `218 
f N "make32" 1 313 ""
v L "var1" 1 313 "int16" `222 
f B "make32" 1 313 "int32(int16 var1)" `221 
f N "make32" 1 314 ""
v L "var1" 1 314 "int16" `224 
v L "var2" 1 314 "int16" `225 
f B "make32" 1 314 "int32(int16 var1,int16 var2)" `223 
f N "make32" 1 315 ""
v L "var1" 1 315 "int16" `227 
v L "var2" 1 315 "int8" `228 
f B "make32" 1 315 "int32(int16 var1,int8 var2)" `226 
f N "make32" 1 316 ""
v L "var1" 1 316 "int16" `230 
v L "var2" 1 316 "int8" `231 
v L "var3" 1 316 "int8" `232 
f B "make32" 1 316 "int32(int16 var1,int8 var2,int8 var3)" `229 
f N "make32" 1 317 ""
v L "var1" 1 317 "int8" `234 
f B "make32" 1 317 "int32(int8 var1)" `233 
f N "make32" 1 318 ""
v L "var1" 1 318 "int8" `236 
v L "var2" 1 318 "int8" `237 
f B "make32" 1 318 "int32(int8 var1,int8 var2)" `235 
f N "make32" 1 319 ""
v L "var1" 1 319 "int8" `239 
v L "var2" 1 319 "int8" `240 
v L "var3" 1 319 "int8" `241 
f B "make32" 1 319 "int32(int8 var1,int8 var2,int8 var3)" `238 
f N "make32" 1 320 ""
v L "var1" 1 320 "int8" `243 
v L "var2" 1 320 "int8" `244 
v L "var3" 1 320 "int8" `245 
v L "var4" 1 320 "int8" `246 
f B "make32" 1 320 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `242 
f N "make32" 1 321 ""
v L "var1" 1 321 "int8" `248 
v L "var2" 1 321 "int16" `249 
f B "make32" 1 321 "int32(int8 var1,int16 var2)" `247 
f N "make32" 1 322 ""
v L "var1" 1 322 "int8" `251 
v L "var2" 1 322 "int16" `252 
v L "var3" 1 322 "int8" `253 
f B "make32" 1 322 "int32(int8 var1,int16 var2,int8 var3)" `250 
f N "make32" 1 323 ""
v L "var1" 1 323 "int8" `255 
v L "var2" 1 323 "int8" `256 
v L "var3" 1 323 "int16" `257 
f B "make32" 1 323 "int32(int8 var1,int8 var2,int16 var3)" `254 
f N "bit_set" 1 324 ""
v L "var" 1 324 "int8" `259 
v L "bit" 1 324 "int8" `260 
f B "bit_set" 1 324 "void(int8 var,int8 bit)" `258 
f N "bit_set" 1 325 ""
v L "var" 1 325 "int16" `262 
v L "bit" 1 325 "int8" `263 
f B "bit_set" 1 325 "void(int16 var,int8 bit)" `261 
f N "bit_set" 1 326 ""
v L "var" 1 326 "int32" `265 
v L "bit" 1 326 "int8" `266 
f B "bit_set" 1 326 "void(int32 var,int8 bit)" `264 
f N "bit_clear" 1 327 ""
v L "var" 1 327 "int8" `268 
v L "bit" 1 327 "int8" `269 
f B "bit_clear" 1 327 "void(int8 var,int8 bit)" `267 
f N "bit_clear" 1 328 ""
v L "var" 1 328 "int16" `271 
v L "bit" 1 328 "int8" `272 
f B "bit_clear" 1 328 "void(int16 var,int8 bit)" `270 
f N "bit_clear" 1 329 ""
v L "var" 1 329 "int32" `274 
v L "bit" 1 329 "int8" `275 
f B "bit_clear" 1 329 "void(int32 var,int8 bit)" `273 
f N "bit_test" 1 330 ""
v L "var" 1 330 "int8" `277 
v L "bit" 1 330 "int8" `278 
f B "bit_test" 1 330 "int8(int8 var,int8 bit)" `276 
f N "bit_test" 1 331 ""
v L "var" 1 331 "int16" `280 
v L "bit" 1 331 "int8" `281 
f B "bit_test" 1 331 "int8(int16 var,int8 bit)" `279 
f N "bit_test" 1 332 ""
v L "var" 1 332 "int32" `283 
v L "bit" 1 332 "int8" `284 
f B "bit_test" 1 332 "int8(int32 var,int8 bit)" `282  "#use delay() Prototypes:"
f N "delay_cycles" 1 335 ""
v L "count" 1 335 "int8" `286 
f B "delay_cycles" 1 335 "void(int8 count)" `285 
f N "delay_ms" 1 336 ""
v L "time" 1 336 "int16" `288 
f B "delay_ms" 1 336 "void(int16 time)" `287 
f N "delay_us" 1 337 ""
v L "time" 1 337 "int16" `290 
f B "delay_us" 1 337 "void(int16 time)" `289  "#use rs232() Prototypes:"
f N "putchar" 1 340 ""
v L "cdata" 1 340 "int8" `292 
f B "putchar" 1 340 "void(int8 cdata)" `291 
f N "putchar" 1 341 ""
v L "cdata" 1 341 "int8" `294 
v L "stream" 1 341 "int8" `295 
f B "putchar" 1 341 "void(int8 cdata,int8 stream)" `293 
f N "puts" 1 342 ""
v L "string" 1 342 "*int8" `297 
f B "puts" 1 342 "void(*int8 string)" `296 
f N "puts" 1 343 ""
v L "string" 1 343 "*int8" `299 
v L "stream" 1 343 "int8" `300 
f B "puts" 1 343 "void(*int8 string,int8 stream)" `298 
f N "getch" 1 344 ""
f B "getch" 1 344 "int8()" `301 
f N "getch" 1 345 ""
v L "stream" 1 345 "int8" `303 
f B "getch" 1 345 "int8(int8 stream)" `302 
f N "gets" 1 346 ""
v L "string" 1 346 "*int8" `305 
f B "gets" 1 346 "void(*int8 string)" `304 
f N "gets" 1 347 ""
v L "string" 1 347 "*int8" `307 
v L "stream" 1 347 "int8" `308 
f B "gets" 1 347 "void(*int8 string,int8 stream)" `306 
f N "kbhit" 1 348 ""
f B "kbhit" 1 348 "int8()" `309 
f N "kbhit" 1 349 ""
v L "stream" 1 349 "int8" `311 
f B "kbhit" 1 349 "int8(int8 stream)" `310 
f N "printf" 1 350 ""
v L "string" 1 350 "*int8" `313 
f B "printf" 1 350 "void(*int8 string,*int8 _VA_LIST)" `312 
f N "fprintf" 1 351 ""
v L "stream" 1 351 "int8" `316 
v L "string" 1 351 "*int8" `317 
f B "fprintf" 1 351 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `315 
f N "putc_send" 1 352 ""
f B "putc_send" 1 352 "void()" `319 
f N "fputc_send" 1 353 ""
v L "stream" 1 353 "int8" `321 
f B "fputc_send" 1 353 "void(int8 stream)" `320 
f N "rcv_buffer_full" 1 354 ""
f B "rcv_buffer_full" 1 354 "int8()" `322 
f N "rcv_buffer_full" 1 355 ""
v L "stream" 1 355 "int8" `324 
f B "rcv_buffer_full" 1 355 "int8(int8 stream)" `323 
f N "rcv_buffer_bytes" 1 356 ""
f B "rcv_buffer_bytes" 1 356 "int16()" `325 
f N "rcv_buffer_bytes" 1 357 ""
v L "stream" 1 357 "int8" `327 
f B "rcv_buffer_bytes" 1 357 "int16(int8 stream)" `326 
f N "tx_buffer_full" 1 358 ""
f B "tx_buffer_full" 1 358 "int8()" `328 
f N "tx_buffer_full" 1 359 ""
v L "stream" 1 359 "int8" `330 
f B "tx_buffer_full" 1 359 "int8(int8 stream)" `329 
f N "tx_buffer_bytes" 1 360 ""
f B "tx_buffer_bytes" 1 360 "int16()" `331 
f N "tx_buffer_bytes" 1 361 ""
v L "stream" 1 361 "int8" `333 
f B "tx_buffer_bytes" 1 361 "int16(int8 stream)" `332  "#use i2c() Prototypes:"
f N "i2c_read" 1 364 ""
f B "i2c_read" 1 364 "int8()" `334 
f N "i2c_read" 1 365 ""
v L "ack" 1 365 "int8" `336 
f B "i2c_read" 1 365 "int8(int8 ack)" `335 
f N "i2c_read" 1 366 ""
v L "stream" 1 366 "int8" `338 
v L "ack" 1 366 "int8" `339 
f B "i2c_read" 1 366 "int8(int8 stream,int8 ack)" `337 
f N "i2c_write" 1 367 ""
v L "data" 1 367 "int8" `341 
f B "i2c_write" 1 367 "int8(int8 data)" `340 
f N "i2c_write" 1 368 ""
v L "stream" 1 368 "int8" `343 
v L "data" 1 368 "int8" `344 
f B "i2c_write" 1 368 "int8(int8 stream,int8 data)" `342 
f N "i2c_start" 1 369 ""
f B "i2c_start" 1 369 "void()" `345 
f N "i2c_start" 1 370 ""
v L "stream" 1 370 "int8" `347 
f B "i2c_start" 1 370 "void(int8 stream)" `346 
f N "i2c_start" 1 371 ""
v L "stream" 1 371 "int8" `349 
v L "restart" 1 371 "int8" `350 
f B "i2c_start" 1 371 "void(int8 stream,int8 restart)" `348 
f N "i2c_stop" 1 372 ""
f B "i2c_stop" 1 372 "void()" `351 
f N "i2c_stop" 1 373 ""
v L "stream" 1 373 "int8" `353 
f B "i2c_stop" 1 373 "void(int8 stream)" `352 
f N "i2c_isr_state" 1 374 ""
f B "i2c_isr_state" 1 374 "int8()" `354 
f N "i2c_slaveaddr" 1 375 ""
v L "addr" 1 375 "int8" `356 
f B "i2c_slaveaddr" 1 375 "void(int8 addr)" `355 
f N "i2c_slaveaddr" 1 376 ""
v L "stream" 1 376 "int8" `358 
v L "addr" 1 376 "int8" `359 
f B "i2c_slaveaddr" 1 376 "void(int8 stream,int8 addr)" `357 
f N "i2c_poll" 1 377 ""
f B "i2c_poll" 1 377 "int8()" `360 
f N "i2c_poll" 1 378 ""
v L "stream" 1 378 "int8" `362 
f B "i2c_poll" 1 378 "int8(int8 stream)" `361 
f N "i2c_init" 1 379 ""
v L "baud" 1 379 "int32" `364 
f B "i2c_init" 1 379 "void(int32 baud)" `363 
f N "i2c_init" 1 380 ""
v L "stream" 1 380 "int8" `366 
v L "baud" 1 380 "int32" `367 
f B "i2c_init" 1 380 "void(int8 stream,int32 baud)" `365  "#use spi() Prototypes:"
f N "spi_xfer" 1 383 ""
f B "spi_xfer" 1 383 "int8()" `368 
f N "spi_xfer" 1 384 ""
f G "spi_xfer" 1 384 "int16(int8 data)" `369 
f N "spi_xfer" 1 385 ""
f G "spi_xfer" 1 385 "int32(int8 data)" `369 
f N "spi_xfer" 1 386 ""
v L "data" 1 386 "int8" `370 
f B "spi_xfer" 1 386 "int8(int8 data)" `369 
f N "spi_xfer" 1 387 ""
v L "data" 1 387 "int16" `372 
f B "spi_xfer" 1 387 "int16(int16 data)" `371 
f N "spi_xfer" 1 388 ""
v L "data" 1 388 "int32" `374 
f B "spi_xfer" 1 388 "int32(int32 data)" `373 
f N "spi_xfer" 1 389 ""
v L "stream" 1 389 "int8" `376 
v L "data" 1 389 "int8" `377 
f B "spi_xfer" 1 389 "int8(int8 stream,int8 data)" `375 
f N "spi_xfer" 1 390 ""
v L "stream" 1 390 "int8" `379 
v L "data" 1 390 "int16" `380 
f B "spi_xfer" 1 390 "int16(int8 stream,int16 data)" `378 
f N "spi_xfer" 1 391 ""
v L "stream" 1 391 "int8" `382 
v L "data" 1 391 "int32" `383 
f B "spi_xfer" 1 391 "int32(int8 stream,int32 data)" `381 
f N "spi_xfer" 1 392 ""
v L "stream" 1 392 "int8" `385 
v L "data" 1 392 "int8" `386 
v L "bits" 1 392 "int8" `387 
f B "spi_xfer" 1 392 "int8(int8 stream,int8 data,int8 bits)" `384 
f N "spi_xfer" 1 393 ""
v L "stream" 1 393 "int8" `389 
v L "data" 1 393 "int16" `390 
v L "bits" 1 393 "int8" `391 
f B "spi_xfer" 1 393 "int16(int8 stream,int16 data,int8 bits)" `388 
f N "spi_xfer" 1 394 ""
v L "stream" 1 394 "int8" `393 
v L "data" 1 394 "int32" `394 
v L "bits" 1 394 "int8" `395 
f B "spi_xfer" 1 394 "int32(int8 stream,int32 data,int8 bits)" `392 
f N "spi_init" 1 395 ""
v L "baud" 1 395 "int32" `397 
f B "spi_init" 1 395 "void(int32 baud)" `396 
f N "spi_init" 1 396 ""
v L "stream" 1 396 "int8" `399 
v L "baud" 1 396 "int32" `400 
f B "spi_init" 1 396 "void(int8 stream,int32 baud)" `398 
f N "spi_speed" 1 397 ""
v L "baud" 1 397 "int32" `402 
f B "spi_speed" 1 397 "void(int32 baud)" `401 
f N "spi_speed" 1 398 ""
v L "stream" 1 398 "int8" `404 
v L "baud" 1 398 "int32" `405 
f B "spi_speed" 1 398 "void(int8 stream,int32 baud)" `403 
f N "spi_speed" 1 399 ""
v L "stream" 1 399 "int8" `407 
v L "baud" 1 399 "int32" `408 
v L "clock" 1 399 "int32" `409 
f B "spi_speed" 1 399 "void(int8 stream,int32 baud,int32 clock)" `406 
f N "spi_prewrite" 1 400 ""
v L "data" 1 400 "int8" `411 
f B "spi_prewrite" 1 400 "void(int8 data)" `410 
f N "spi_prewrite" 1 401 ""
v L "data" 1 401 "int16" `413 
f B "spi_prewrite" 1 401 "void(int16 data)" `412 
f N "spi_prewrite" 1 402 ""
v L "data" 1 402 "int32" `415 
f B "spi_prewrite" 1 402 "void(int32 data)" `414 
f N "spi_prewrite" 1 403 ""
v L "??65535" 1 403 "int8" `417 
v L "data" 1 403 "int8" `418 
f B "spi_prewrite" 1 403 "void(int8 ,int8 data)" `416 
f N "spi_prewrite" 1 404 ""
v L "??65535" 1 404 "int8" `420 
v L "data" 1 404 "int16" `421 
f B "spi_prewrite" 1 404 "void(int8 ,int16 data)" `419 
f N "spi_prewrite" 1 405 ""
v L "??65535" 1 405 "int8" `423 
v L "data" 1 405 "int32" `424 
f B "spi_prewrite" 1 405 "void(int8 ,int32 data)" `422 
f N "spi_xfer_in" 1 406 ""
f B "spi_xfer_in" 1 406 "int8()" `425 
f N "spi_xfer_in" 1 407 ""
f G "spi_xfer_in" 1 407 "int16(int8 bits)" `426 
f N "spi_xfer_in" 1 408 ""
f G "spi_xfer_in" 1 408 "int32(int8 bits)" `426 
f N "spi_xfer_in" 1 409 ""
v L "bits" 1 409 "int8" `427 
f B "spi_xfer_in" 1 409 "int8(int8 bits)" `426 
f N "spi_xfer_in" 1 410 ""
v L "bits" 1 410 "int8" `429 
f G "spi_xfer_in" 1 410 "int16(int8 bits,int8 bits)" `428 
f N "spi_xfer_in" 1 411 ""
v L "bits" 1 411 "int8" `429 
f G "spi_xfer_in" 1 411 "int32(int8 bits,int8 bits)" `428 
f N "spi_xfer_in" 1 412 ""
v L "stream" 1 412 "int8" `429 
v L "bits" 1 412 "int8" `430 
f B "spi_xfer_in" 1 412 "int8(int8 stream,int8 bits)" `428 
f N "spi_xfer_in" 1 413 ""
v L "stream" 1 413 "int8" `429 
v L "bits" 1 413 "int8" `433 
f G "spi_xfer_in" 1 413 "int16(int8 stream,int8 bits,int8 task)" `431 
f N "spi_xfer_in" 1 414 ""
v L "stream" 1 414 "int8" `429 
v L "bits" 1 414 "int8" `433 
f G "spi_xfer_in" 1 414 "int32(int8 stream,int8 bits,int8 task)" `431  "#use rtos() Prototypes:"
f N "rtos_run" 1 417 ""
f B "rtos_run" 1 417 "void(int8 stream,int8 bits,int8 task)" `431 
f N "rtos_yield" 1 418 ""
f B "rtos_yield" 1 418 "void(int8 bits,int8 task)" `432 
f N "rtos_enable" 1 419 ""
v L "task" 1 419 "int8" `434 
f B "rtos_enable" 1 419 "void(int8 task)" `433 
f N "rtos_disable" 1 420 ""
v L "task" 1 420 "int8" `436 
f B "rtos_disable" 1 420 "void(int8 task)" `435 
f N "rtos_terminate" 1 421 ""
f B "rtos_terminate" 1 421 "void()" `437 
f N "rtos_await" 1 422 ""
v L "flag" 1 422 "int8" `439 
f B "rtos_await" 1 422 "void(int8 flag)" `438 
f N "rtos_wait" 1 423 ""
v L "sem" 1 423 "int8" `441 
f B "rtos_wait" 1 423 "void(int8 sem)" `440 
f N "rtos_signal" 1 424 ""
v L "sem" 1 424 "int8" `443 
f B "rtos_signal" 1 424 "void(int8 sem)" `442 
f N "rtos_msg_send" 1 425 ""
v L "task" 1 425 "int8" `445 
v L "msg" 1 425 "int8" `446 
f B "rtos_msg_send" 1 425 "void(int8 task,int8 msg)" `444 
f N "rtos_msg_read" 1 426 ""
f B "rtos_msg_read" 1 426 "int8()" `447 
f N "rtos_msg_poll" 1 427 ""
f B "rtos_msg_poll" 1 427 "int8()" `448 
f N "rtos_overrun" 1 428 ""
v L "task" 1 428 "int8" `450 
f B "rtos_overrun" 1 428 "int8(int8 task)" `449 
f N "rtos_stats" 1 429 ""
v L "task" 1 429 "int8" `452 
v L "stat" 1 429 "*int8" `453 
f B "rtos_stats" 1 429 "void(int8 task,*int8 stat)" `451  "#use timer() Prototypes:"
f N "get_ticks" 1 432 ""
f B "get_ticks" 1 432 "int8()" `454 
f N "get_ticks" 1 433 ""
f G "get_ticks" 1 433 "int16(int8 stream)" `455 
f N "get_ticks" 1 434 ""
f G "get_ticks" 1 434 "int32(int8 stream)" `455 
f N "get_ticks" 1 435 ""
v L "stream" 1 435 "int8" `456 
f B "get_ticks" 1 435 "int8(int8 stream)" `455 
f N "get_ticks" 1 436 ""
v L "stream" 1 436 "int8" `458 
f G "get_ticks" 1 436 "int16(int8 stream)" `457 
f N "get_ticks" 1 437 ""
v L "stream" 1 437 "int8" `458 
f G "get_ticks" 1 437 "int32(int8 stream)" `457 
f N "set_ticks" 1 438 ""
v L "value" 1 438 "int8" `458 
f B "set_ticks" 1 438 "void(int8 value)" `457 
f N "set_ticks" 1 439 ""
v L "value" 1 439 "int16" `460 
f B "set_ticks" 1 439 "void(int16 value)" `459 
f N "set_ticks" 1 440 ""
v L "value" 1 440 "int32" `462 
f B "set_ticks" 1 440 "void(int32 value)" `461 
f N "set_ticks" 1 441 ""
v L "stream" 1 441 "int8" `464 
v L "value" 1 441 "int8" `465 
f B "set_ticks" 1 441 "void(int8 stream,int8 value)" `463 
f N "set_ticks" 1 442 ""
v L "stream" 1 442 "int8" `467 
v L "value" 1 442 "int16" `468 
f B "set_ticks" 1 442 "void(int8 stream,int16 value)" `466 
f N "set_ticks" 1 443 ""
v L "stream" 1 443 "int8" `470 
v L "value" 1 443 "int32" `471 
f B "set_ticks" 1 443 "void(int8 stream,int32 value)" `469  "#use pwm() Prototypes:"
f N "pwm_on" 1 446 ""
f B "pwm_on" 1 446 "void()" `472 
f N "pwm_on" 1 447 ""
v L "stream" 1 447 "int8" `474 
f B "pwm_on" 1 447 "void(int8 stream)" `473 
f N "pwm_off" 1 448 ""
f B "pwm_off" 1 448 "void()" `475 
f N "pwm_off" 1 449 ""
v L "stream" 1 449 "int8" `477 
f B "pwm_off" 1 449 "void(int8 stream)" `476 
f N "pwm_set_duty" 1 450 ""
v L "duty" 1 450 "int16" `479 
f B "pwm_set_duty" 1 450 "void(int16 duty)" `478 
f N "pwm_set_duty" 1 451 ""
v L "stream" 1 451 "int8" `481 
v L "duty" 1 451 "int16" `482 
f B "pwm_set_duty" 1 451 "void(int8 stream,int16 duty)" `480 
f N "pwm_set_duty_percent" 1 452 ""
v L "percent" 1 452 "int16" `484 
f B "pwm_set_duty_percent" 1 452 "void(int16 percent)" `483 
f N "pwm_set_duty_percent" 1 453 ""
v L "stream" 1 453 "int8" `486 
v L "percent" 1 453 "int16" `487 
f B "pwm_set_duty_percent" 1 453 "void(int8 stream,int16 percent)" `485 
f N "pwm_set_frequency" 1 454 ""
v L "frequency" 1 454 "int32" `489 
f B "pwm_set_frequency" 1 454 "void(int32 frequency)" `488 
f N "pwm_set_frequency" 1 455 ""
v L "stream" 1 455 "int8" `491 
v L "frequency" 1 455 "int32" `492 
f B "pwm_set_frequency" 1 455 "void(int8 stream,int32 frequency)" `490  "#use capture() Prototypes:"
f N "get_capture_time" 1 458 ""
f B "get_capture_time" 1 458 "int16()" `493 
f N "get_capture_time" 1 459 ""
v L "stream" 1 459 "int8" `495 
f B "get_capture_time" 1 459 "int16(int8 stream)" `494 
f N "get_capture_event" 1 460 ""
f B "get_capture_event" 1 460 "int8()" `496 
f N "get_capture_event" 1 461 ""
v L "stream" 1 461 "int8" `498 
f B "get_capture_event" 1 461 "int8(int8 stream)" `497  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 474 ""
v L "address" 1 474 "int16" `500 
f B "goto_address" 1 474 "void(int16 address)" `499 
f N "label_address" 1 475 ""
v L "label" 1 475 "int16" `502 
f B "label_address" 1 475 "int16(int16 label)" `501  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 482 "unsigned int8"
f N "read_eeprom" 1 485 ""
v L "address" 1 485 "int8" `504 
f B "read_eeprom" 1 485 "int8(int8 address)" `503 
f N "write_eeprom" 1 486 ""
v L "address" 1 486 "int8" `506 
v L "value" 1 486 "int8" `507 
f B "write_eeprom" 1 486 "void(int8 address,int8 value)" `505  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 493 ""
v L "interrupt" 1 493 "int32" `509 
f B "enable_interrupts" 1 493 "void(int32 interrupt)" `508 
f N "disable_interrupts" 1 494 ""
v L "interrupt" 1 494 "int32" `511 
f B "disable_interrupts" 1 494 "void(int32 interrupt)" `510 
f N "clear_interrupt" 1 495 ""
v L "interrupt" 1 495 "int32" `513 
f B "clear_interrupt" 1 495 "void(int32 interrupt)" `512 
f N "interrupt_active" 1 496 ""
v L "interrupt" 1 496 "int32" `515 
f B "interrupt_active" 1 496 "int8(int32 interrupt)" `514 
f N "interrupt_enabled" 1 497 ""
v L "interrupt" 1 497 "int32" `517 
f B "interrupt_enabled" 1 497 "int8(int32 interrupt)" `516 
f N "ext_int_edge" 1 498 ""
v L "source" 1 498 "int8" `519 
v L "edge" 1 498 "int8" `520 
f B "ext_int_edge" 1 498 "void(int8 source,int8 edge)" `518 
f N "jump_to_isr" 1 499 ""
v L "address" 1 499 "int16" `522 
f B "jump_to_isr" 1 499 "void(int16 address)" `521  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 501 "0x40"
d G "H_TO_L" 1 502 "0"
d G "GLOBAL" 1 504 "0x0BC0"
d G "PERIPH" 1 505 "0x0B40"
d G "INT_RTCC" 1 506 "0x000B20"
d G "INT_RB" 1 507 "0x00FF0B08"
d G "INT_EXT_L2H" 1 508 "0x50000B10"
d G "INT_EXT_H2L" 1 509 "0x60000B10"
d G "INT_EXT" 1 510 "0x000B10"
d G "INT_TBE" 1 511 "0x008C10"
d G "INT_RDA" 1 512 "0x008C20"
d G "INT_TIMER1" 1 513 "0x008C01"
d G "INT_TIMER2" 1 514 "0x008C02"
d G "INT_CCP1" 1 515 "0x008C04"
d G "INT_COMP" 1 516 "0x008C40"
d G "INT_TIMER0" 1 517 "0x000B20"
d G "INT_EEPROM" 1 518 "0x008C80"
D G "_STDIO" 2 12 ""
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 22 "unsigned int8"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_isr" 3 19 10 "FUNCTION"
F N "memmove" 3 34 ""
V L "s1" 3 34 "*int8" `524 
V L "s2" 3 34 "*int8" `525 
V L "n" 3 34 "int8" `526 
F G "memmove" 3 35 "*int8(*int8 s1,*int8 s2,int8 n)" `523 
V L "sc1" 3 36 "*int8" `527 
V L "sc2" 3 37 "*int8" `528 
D G "strcopy" 3 54 "strcpy"
F N "strncpy" 3 61 ""
V L "s1" 3 61 "*int8" `530 
V L "s2" 3 61 "*int8" `531 
V L "n" 3 61 "int8" `532 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int8 n)" `529 
V L "s" 3 63 "*int8" `533 
F N "strcat" 3 78 ""
V L "s1" 3 78 "*int8" `535 
V L "s2" 3 78 "*int8" `536 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `534 
V L "s" 3 80 "*int8" `537 
F N "strncat" 3 96 ""
V L "s1" 3 96 "*int8" `539 
V L "s2" 3 96 "*int8" `540 
V L "n" 3 96 "int8" `541 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int8 n)" `538 
V L "s" 3 98 "*int8" `542 
C L "memcmp" 3 19 3 "FUNCTION"
F N "memcmp" 3 120 ""
V L "s1" 3 120 "*int8" `544 
V L "s2" 3 120 "*int8" `545 
V L "n" 3 120 "int8" `546 
F G "memcmp" 3 121 "sint8(*int8 s1,*int8 s2,int8 n)" `543 
V L "su1" 3 122 "*int8" `547 
V L "su2" 3 122 "*int8" `548 
C L "strcmp" 3 19 2 "FUNCTION"
F N "strcmp" 3 134 ""
V L "s1" 3 134 "*int8" `550 
V L "s2" 3 134 "*int8" `551 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `549 
C L "strcoll" 3 19 2 "FUNCTION"
F N "strcoll" 3 144 ""
V L "s1" 3 144 "*int8" `553 
V L "s2" 3 144 "*int8" `554 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `552 
C L "strncmp" 3 19 4 "FUNCTION"
F N "strncmp" 3 157 ""
V L "s1" 3 157 "*int8" `556 
V L "s2" 3 157 "*int8" `557 
V L "n" 3 157 "int8" `558 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int8 n)" `555 
C L "strxfrm" 3 19 4 "FUNCTION"
F N "strxfrm" 3 170 ""
V L "s1" 3 170 "*int8" `560 
V L "s2" 3 170 "*int8" `561 
V L "n" 3 170 "int8" `562 
F G "strxfrm" 3 171 "int8(*int8 s1,*int8 s2,int8 n)" `559 
V L "c" 3 172 "int8" `563 
V L "n1" 3 173 "int8" `564 
C L "strxfrm" 3 19 1 "FUNCTION"
F N "memchr" 3 201 ""
V L "s" 3 201 "*int8" `566 
V L "c" 3 201 "int8" `567 
V L "n" 3 201 "int8" `568 
F G "memchr" 3 202 "*int8(*int8 s,int8 c,int8 n)" `565 
V L "uc" 3 203 "int8" `569 
V L "su" 3 204 "*int8" `570 
F N "strchr" 3 215 ""
V L "s" 3 215 "*int8" `572 
V L "c" 3 215 "int8" `573 
F G "strchr" 3 216 "*int8(*int8 s,int8 c)" `571 
C L "strcspn" 3 19 4 "FUNCTION"
F N "strcspn" 3 227 ""
V L "s1" 3 227 "*int8" `575 
V L "s2" 3 227 "*int8" `576 
F G "strcspn" 3 228 "int8(*int8 s1,*int8 s2)" `574 
V L "sc1" 3 229 "*int8" `577 
V L "sc2" 3 229 "*int8" `578 
F N "strpbrk" 3 242 ""
V L "s1" 3 242 "*int8" `580 
V L "s2" 3 242 "*int8" `581 
F G "strpbrk" 3 243 "*int8(*int8 s1,*int8 s2)" `579 
V L "sc1" 3 244 "*int8" `582 
V L "sc2" 3 244 "*int8" `583 
F N "strrchr" 3 257 ""
V L "s" 3 257 "*int8" `585 
V L "c" 3 257 "int8" `586 
F G "strrchr" 3 258 "*int8(*int8 s,int8 c)" `584 
V L "p" 3 259 "*int8" `587 
C L "strspn" 3 19 2 "FUNCTION"
F N "strspn" 3 272 ""
V L "s1" 3 272 "*int8" `589 
V L "s2" 3 272 "*int8" `590 
F G "strspn" 3 273 "int8(*int8 s1,*int8 s2)" `588 
V L "sc1" 3 274 "*int8" `591 
V L "sc2" 3 274 "*int8" `592 
F N "strstr" 3 291 ""
V L "s1" 3 291 "*int8" `594 
V L "s2" 3 291 "*int8" `595 
F G "strstr" 3 292 "*int8(*int8 s1,*int8 s2)" `593 
V L "s" 3 293 "*int8" `596 
V L "t" 3 293 "*int8" `597 
C L "strlen" 3 19 2 "FUNCTION"
F N "strlen" 3 318 ""
V L "s" 3 318 "*int8" `599 
F G "strlen" 3 319 "int8(*int8 s)" `598 
V L "sc" 3 320 "*int8" `600 
F N "strtok" 3 341 ""
V L "s1" 3 341 "*int8" `602 
V L "s2" 3 341 "*int8" `603 
F G "strtok" 3 342 "*int8(*int8 s1,*int8 s2)" `601 
V L "beg" 3 343 "*int8" `604 
V L "end" 3 343 "*int8" `605 
V L "save" 3 344 "*int8" `606 
C L "stricmp" 3 19 6 "FUNCTION"
F N "stricmp" 3 392 ""
V L "s1" 3 392 "*int8" `608 
V L "s2" 3 392 "*int8" `609 
F G "stricmp" 3 393 "sint8(*int8 s1,*int8 s2)" `607 
F N "strlwr" 3 406 ""
V L "s" 3 406 "*int8" `613 
F G "strlwr" 3 407 "*int8(*int8 s)" `612 
V L "p" 3 408 "*int8" `614 
F N "strupr" 3 420 ""
V L "s" 3 420 "*int8" `616 
F G "strupr" 3 421 "*int8(*int8 s)" `615 
V L "p" 3 422 "*int8" `617 
D G "_STDLIB" 6 13 ""
D G "RAND_MAX" 6 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 6 26 "1"
T G "div_t" 6 34 "{sint8 quot,sint8 rem}" `621 
T G "ldiv_t" 6 39 "{sint16 quot,sint16 rem}" `625  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 6 44 2 "FUNCTION"
C L "atoi" 6 47 1 "*"
C L "atoi" 6 47 1 "*"
F N "atoi" 6 51 ""
V L "s" 6 51 "*int8" `627 
f G "atoi" 6 51 "sint8(*int8 s)" `626  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 6 59 ""
V L "s" 6 59 "*int8" `629 
f G "atoi32" 6 59 "sint32(*int8 s)" `628  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 6 47 2 "FUNCTION"
F N "itoa" 6 80 ""
V L "num" 6 80 "sint32" `631 
V L "base" 6 80 "int8" `632 
V L "s" 6 80 "*int8" `633 
f G "itoa" 6 80 "*int8(sint32 num,int8 base,*int8 s)" `630  "Standard template: signed int16  atol(char * s)"
C L "itoa" 6 82 1 "*"
C L "itoa" 6 82 1 "*"
F N "atol" 6 86 ""
V L "s" 6 86 "*int8" `635 
f G "atol" 6 86 "sint16(*int8 s)" `634  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 6 88 1 "*"
C L "atol" 6 88 1 "*"
C L "atol" 6 88 1 "*"
C L "atol" 6 88 1 "*"
F N "strtol" 6 94 ""
V L "s" 6 94 "*int8" `637 
V L "endptr" 6 94 "*int8" `638 
V L "base" 6 94 "sint8" `639 
f G "strtol" 6 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `636  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 6 96 1 "*"
C L "strtol" 6 96 1 "*"
C L "strtol" 6 96 1 "*"
C L "strtol" 6 96 1 "*"
F N "strtoul" 6 102 ""
V L "s" 6 102 "*int8" `641 
V L "endptr" 6 102 "*int8" `642 
V L "base" 6 102 "sint8" `643 
f G "strtoul" 6 102 "int16(*int8 s,*int8 endptr,sint8 base)" `640  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 6 96 2 "FUNCTION"
C L "strtoul" 6 104 1 "*"
C L "strtoul" 6 104 1 "*"
C L "strtoul" 6 104 1 "*"
F N "strtof" 6 111 ""
V L "s" 6 111 "*int8" `645 
V L "endptr" 6 111 "*int8" `646 
f G "strtof" 6 111 "float(*int8 s,*int8 endptr)" `644  "provided for compatibility"
D G "strtof48" 6 117 "(s,e) strtof(s, e)"
D G "strtod" 6 118 "(s,e) strtof(s, e)"
C L "strtof" 6 104 1 "FUNCTION"
C L "strtof" 6 121 1 "*"
D G "atof" 6 125 "(s)   strtof(s, 0)"
C L "strtof" 6 121 1 "FUNCTION"
C L "strtof" 6 144 1 "*"
C L "strtof" 6 144 1 "*"
C L "strtof" 6 144 1 "*"
F N "atoe" 6 150 ""
V L "s" 6 150 "*int8" `648 
f G "atoe" 6 150 "float(*int8 s)" `647  "Pseudo-random sequence generation functions"
C L "atoe" 6 144 1 "FUNCTION"
C L "atoe" 6 161 1 "*"
C L "atoe" 6 161 1 "*"
C L "atoe" 6 161 1 "*"
C L "atoe" 6 161 1 "*"
C L "atoe" 6 161 1 "*"
F N "rand" 6 170 ""
f G "rand" 6 170 "int16()" `649  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
C L "rand" 6 172 1 "*"
F N "srand" 6 192 ""
V L "seed" 6 192 "int32" `651 
f G "srand" 6 192 "void(int32 seed)" `650  "Memory management functions"
C L "srand" 6 172 3 "FUNCTION"
F N "system" 6 206 ""
V L "string" 6 206 "*int8" `653 
f G "system" 6 206 "sint8(*int8 string)" `652  "Searching and sorting utilities"
C L "system" 6 172 1 "FUNCTION"
C L "system" 6 212 1 "*"
C L "system" 6 212 1 "*"
C L "system" 6 212 1 "*"
C L "system" 6 212 1 "*"
C L "system" 6 212 1 "*"
C L "system" 6 212 1 "*"
C L "system" 6 212 1 "*"
C L "system" 6 212 1 "*"
C L "system" 6 212 1 "*"
C L "system" 6 212 1 "*"
C L "system" 6 212 4 "*"
C L "system" 6 230 1 "*"
C L "system" 6 230 1 "*"
C L "system" 6 230 1 "*"
C L "system" 6 230 1 "*"
C L "system" 6 230 1 "*"
C L "system" 6 230 1 "*"
C L "system" 6 230 1 "*"
C L "system" 6 230 1 "*"
D G "labs" 6 250 "abs"
F N "div" 6 252 ""
V L "numer" 6 252 "sint8" `655 
V L "denom" 6 252 "sint8" `656 
f G "div" 6 252 "div_t(sint8 numer,sint8 denom)" `654 
F N "ldiv" 6 253 ""
V L "numer" 6 253 "sint16" `658 
V L "denom" 6 253 "sint16" `659 
f G "ldiv" 6 253 "ldiv_t(sint16 numer,sint16 denom)" `657  "Multibyte character functions"
C L "ldiv" 6 230 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
F N "div" 6 275 ""
V L "numer" 6 275 "sint8" `655 
V L "denom" 6 275 "sint8" `662 
F G "div" 6 276 "div_t(sint8 numer,sint8 denom)" `654 
V L "val" 6 277 "div_t" `660 
F N "ldiv" 6 283 ""
V L "numer" 6 283 "sint16" `658 
V L "denom" 6 283 "sint16" `669 
F G "ldiv" 6 284 "ldiv_t(sint16 numer,sint16 denom)" `657 
V L "val" 6 285 "ldiv_t" `667 
F N "atoe" 6 362 ""
V L "s" 6 362 "*int8" `675 
F G "atoe" 6 363 "float(*int8 s)" `647 
V L "pow10" 6 364 "float" `674 
V L "result" 6 365 "float" `675 
V L "sign" 6 366 "int8" `676 
V L "expsign" 6 367 "int8" `677 
V L "c" 6 368 "int8" `678 
V L "ptr" 6 369 "int8" `679 
V L "i" 6 370 "int8" `680 
V L "exp" 6 371 "float" `681 
V L "expcnt" 6 372 "int8" `682 
C L "atoe" 6 398 1 "FUNCTION"
F N "atoi" 6 430 ""
V L "s" 6 430 "*int8" `695 
F G "atoi" 6 431 "sint8(*int8 s)" `626 
V L "result" 6 432 "sint8" `694 
V L "sign" 6 433 "int8" `695 
V L "base" 6 433 "int8" `696 
V L "index" 6 433 "int8" `697 
V L "c" 6 434 "int8" `698 
C L "atoi" 6 398 1 "FUNCTION"
C L "atoi" 6 398 1 "FUNCTION"
C L "atoi" 6 398 1 "FUNCTION"
C L "atoi" 6 398 1 "FUNCTION"
C L "atoi" 6 398 1 "FUNCTION"
C L "atoi" 6 398 1 "FUNCTION"
F N "atol" 6 499 ""
V L "s" 6 499 "*int8" `700 
F G "atol" 6 500 "sint16(*int8 s)" `634 
V L "result" 6 501 "sint16" `699 
V L "sign" 6 502 "int8" `700 
V L "base" 6 502 "int8" `701 
V L "index" 6 502 "int8" `702 
V L "c" 6 503 "int8" `703 
C L "atol" 6 398 1 "FUNCTION"
C L "atol" 6 398 1 "FUNCTION"
C L "atol" 6 398 1 "FUNCTION"
C L "atol" 6 398 1 "FUNCTION"
C L "mult_with10" 6 398 1 "FUNCTION"
F N "mult_with10" 6 566 ""
V L "num" 6 566 "int32" `705 
F G "mult_with10" 6 567 "sint32(int32 num)" `704 
F N "atoi32" 6 572 ""
V L "s" 6 572 "*int8" `707 
F G "atoi32" 6 573 "sint32(*int8 s)" `628 
V L "result" 6 574 "sint32" `706 
V L "sign" 6 575 "int8" `707 
V L "base" 6 575 "int8" `708 
V L "index" 6 575 "int8" `709 
V L "c" 6 576 "int8" `710 
C L "atoi32" 6 398 1 "FUNCTION"
C L "atoi32" 6 398 1 "FUNCTION"
C L "atoi32" 6 398 1 "FUNCTION"
C L "atoi32" 6 398 1 "FUNCTION"
C L "atoi32" 6 398 1 "FUNCTION"
F N "itoa" 6 771 ""
V L "num" 6 771 "sint32" `631 
V L "base" 6 771 "int8" `632 
V L "s" 6 771 "*int8" `714 
F G "itoa" 6 772 "*int8(sint32 num,int8 base,*int8 s)" `630 
V L "temp" 6 773 "int32" `711 
V L "i" 6 774 "int8" `712 
V L "sign" 6 774 "int8" `713 
V L "cnt" 6 774 "int8" `714 
V L "c" 6 775 "int8" `715 
C L "itoa" 6 398 1 "FUNCTION"
C L "itoa" 6 398 1 "FUNCTION"
C L "itoa" 6 398 1 "FUNCTION"
C L "itoa" 6 398 1 "FUNCTION"
C L "itoa" 6 398 1 "FUNCTION"
F N "strtof" 6 886 ""
V L "s" 6 886 "*int8" `645 
V L "endptr" 6 886 "*int8" `724 
F G "strtof" 6 887 "float(*int8 s,*int8 endptr)" `644 
V L "pow10" 6 888 "float" `722 
V L "result" 6 889 "float" `723 
V L "skip" 6 890 "int1" `724 
V L "sign" 6 890 "int1" `725 
V L "point" 6 890 "int1" `726 
V L "c" 6 891 "int8" `727 
V L "ptr" 6 892 "int8" `728 
F N "strtoul" 6 1104 ""
V L "s" 6 1104 "*int8" `641 
V L "endptr" 6 1104 "*int8" `642 
V L "base" 6 1104 "sint8" `733 
F G "strtoul" 6 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `640 
V L "sc" 6 1106 "*int8" `730 
V L "s1" 6 1106 "*int8" `731 
V L "sd" 6 1106 "*int8" `732 
V L "x" 6 1107 "int16" `733 
V L "sign" 6 1108 "int8" `734 
V L "digits" 6 1109 "int8[1]" `735 
C L "strtoul" 6 398 1 "FUNCTION"
C L "strtoul" 6 398 1 "FUNCTION"
C L "strtoul" 6 398 1 "FUNCTION"
F N "strtol" 6 1166 ""
V L "s" 6 1166 "*int8" `637 
V L "endptr" 6 1166 "*int8" `638 
V L "base" 6 1166 "sint8" `740 
F G "strtol" 6 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `636 
V L "sc" 6 1168 "*int8" `737 
V L "s1" 6 1168 "*int8" `738 
V L "sd" 6 1168 "*int8" `739 
V L "x" 6 1169 "sint16" `740 
V L "sign" 6 1170 "int8" `741 
V L "digits" 6 1171 "int8[1]" `742 
C L "strtol" 6 398 1 "FUNCTION"
C L "strtol" 6 398 1 "FUNCTION"
C L "strtol" 6 398 1 "FUNCTION"
F N "system" 6 1229 ""
V L "string" 6 1229 "*int8" `745 
F G "system" 6 1230 "sint8(*int8 string)" `652 
F N "mblen" 6 1234 ""
V L "s" 6 1234 "*int8" `745 
V L "n" 6 1234 "int8" `746 
F G "mblen" 6 1235 "int8(*int8 s,int8 n)" `744 
F N "mbtowc" 6 1239 ""
V L "pwc" 6 1239 "*int8" `748 
V L "s" 6 1239 "*int8" `749 
V L "n" 6 1239 "int8" `750 
F G "mbtowc" 6 1240 "int8(*int8 pwc,*int8 s,int8 n)" `747 
F N "wctomb" 6 1245 ""
V L "s" 6 1245 "*int8" `752 
V L "wchar" 6 1245 "int8" `753 
F G "wctomb" 6 1246 "int8(*int8 s,int8 wchar)" `751 
F N "mbstowcs" 6 1251 ""
V L "pwcs" 6 1251 "*int8" `755 
V L "s" 6 1251 "*int8" `756 
V L "n" 6 1251 "int8" `757 
F G "mbstowcs" 6 1252 "int8(*int8 pwcs,*int8 s,int8 n)" `754 
F N "wcstombs" 6 1257 ""
V L "s" 6 1257 "*int8" `759 
V L "pwcs" 6 1257 "*int8" `760 
V L "n" 6 1257 "int8" `761 
F G "wcstombs" 6 1258 "int8(*int8 s,*int8 pwcs,int8 n)" `758 
V G "_Randseed" 6 1267 "int32" `762 
F N "rand" 6 1269 ""
F G "rand" 6 1270 "int16()" `649 
F N "srand" 6 1275 ""
V L "seed" 6 1275 "int32" `767 
F G "srand" 6 1276 "void(int32 seed)" `650 
F N "*_Cmpfun" 6 1285 ""
V L "p1" 6 1285 "*int8" `767 
V L "p2" 6 1285 "*int8" `768 
T G "*_Cmpfun" 6 1285 "sint8(*int8 p1,*int8 p2)" `766 
F N "qsort" 6 1292 ""
V L "qdata" 6 1292 "*int8" `771 
V L "qitems" 6 1292 "int8" `772 
V L "qsize" 6 1292 "int8" `773 
V L "cmp" 6 1292 "_Cmpfun" `774 
F G "qsort" 6 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `770 
V L "m" 6 1293 "int8" `775 
V L "j" 6 1293 "int8" `776 
V L "i" 6 1293 "int8" `777 
V L "l" 6 1293 "int8" `778 
V L "done" 6 1294 "int1" `779 
V L "t" 6 1295 "int8[16]" `780 
F N "bsearch" 6 1320 ""
V L "key" 6 1320 "*int8" `783 
V L "base" 6 1320 "*int8" `784 
V L "num" 6 1320 "int8" `785 
V L "width" 6 1320 "int8" `786 
V L "cmp" 6 1320 "_Cmpfun" `787 
F G "bsearch" 6 1321 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `782 
V L "p" 6 1322 "*int8" `788 
V L "q" 6 1322 "*int8" `789 
V L "n" 6 1323 "int8" `790 
V L "pivot" 6 1324 "int8" `791 
V L "val" 6 1325 "sint8" `792 
C L "bsearch" 6 398 1 "FUNCTION"
V G "charFromModem" 0 36 "int8" `801 
V G "buffer" 0 37 "int8[4]" `802 
V G "status" 0 38 "int8" `803 
V G "receivedStatus" 0 39 "int8" `804 
C L "get_232" 0 32 2 "FUNCTION"
F N "get_232" 0 44 ""
F G "get_232" 0 44 "void()" `805 
V L "i" 0 45 "int8" `806 
F N "readMessage" 0 66 ""
F G "readMessage" 0 66 "void()" `807 
F N "sendMessage" 0 72 ""
V L "message" 0 72 "int8" `810 
F G "sendMessage" 0 72 "void(int8 message)" `809 
F N "modemConfiguration" 0 80 ""
F G "modemConfiguration" 0 80 "void()" `816 
F N "setupConnection" 0 101 ""
F G "setupConnection" 0 101 "void()" `822 
F N "openConnection" 0 115 ""
F G "openConnection" 0 115 "void()" `827 
F N "closeConnection" 0 120 ""
F G "closeConnection" 0 120 "void()" `829 
C L "changeStatus" 0 32 1 "FUNCTION"
F N "changeStatus" 0 127 ""
V L "newStatus" 0 127 "int8" `832 
F G "changeStatus" 0 127 "void(int8 newStatus)" `831 
F N "checkBlinkingMode" 0 144 ""
F G "checkBlinkingMode" 0 144 "void()" `833 
V L "i" 0 145 "int8" `834 
F N "MAIN" 0 161 ""
F G "MAIN" 0 161 "void()" `835 
V L "messageList" 0 163 "*int8[3]" `836 
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 3 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
