
#define led2sinal pin_b5
#define ledpower pin_a6

#define intermitente_sinal pin_b3
#define intermitente pin_a3
#define jca pin_b6
#define power pin_a4
#define BUFFER_SIZE 60 //Buffer size you can adjust this size 
//*********************************************************************
#include <16F628A.h>
#include <stdio.h>
#include <stdlib.h> 
#include <string.h>

#use delay(clock=15000000)// Clock de 4MHz
#use rs232(baud=9600,parity=N,xmit=PIN_B2,rcv=PIN_B1,bits=8)
#use fast_io(a)


#priority int_rda
#byte RCREG = 0x1A 
// Definição de comunicação RS232
   //int i;    // Define variável caracter
   //int a[12];

int1 startreception1=0;
int1 startreception=0;
int z;
int a;
int b;
int d;

unsigned int   X=0;

unsigned int   i=0;

unsigned char  dado=0;
Unsigned int8 buffer[7]; 





}
#INT_RDA
void trata_232()
{
  
   
   
   if(KBHIT()) 
      dado=getc();
      OUTPUT_TOGGLE(led2sinal);

   if(dado=='I'  && !startreception)
   {  
      i=0;
      startreception=1;
      buffer[i]=dado;
      i++;
   }
   else
     if(startreception)
     {
      buffer[i]=dado;
      i++;
     }
         
   
  
      i=0;
      startreception=0;
      //check mensagem
      if(buffer[0]=='I' && buffer[1]=='N'&& buffer[2]=='T')
      a=1;
        
       
       
     }
     
     //SEGUNDO CARACTER 
     
        if(dado=='C'  && !startreception1)
   {  
      i=0;
      startreception1=1;
      buffer[x]=dado;
      x++;
   }
   else
     if(startreception1)
     {
      buffer[x]=dado;
      x++;
     }
         
   

      startreception1=0;
      //check mensagem
      if(buffer[0]=='C' && buffer[1]=='O' && buffer[2]=='R')
     
        b=1;
       
     }
     
       
   

}
   


void leitura2(){

if(input (pin_a3)){
for (z=0;z<17; z++){


output_high(led2sinal);
delay_ms(400);
output_low(led2sinal);

delay_ms(400);
}
}
if(input (pin_a3)){

//printf("intermitente");
for (z=0;z<6; z++){
output_high(led2sinal);
printf("AT^SISC=0\r");
delay_ms(10000);
printf("AT^SISO=0\r");
DELAY_MS(5000);
printf("AT^SISW=0,8\r");
delay_ms(1000);
printf("INT\r");
delay_ms(1000);
LERSMS();
printf("AT^SISC=0\r");
delay_ms(10000);

}
}
}
void lersms(){
printf("AT^SISC=0\r");
DELAY_MS(10000);
printf("AT^SISO=0\r");
DELAY_MS(5000);
printf("AT^SISR=0,4\r");
DELAY_MS(1000);
//printf("AT^SISC=0\r");
//DELAY_MS(2000);

}
void estado(){
printf("AT^SISC=0\r");
DELAY_MS(10000);
printf("AT^SISO=0\r");
DELAY_MS(5000);
printf("AT^SISW=0,8\r");
delay_ms(1000);

printf("COR\r");
//delay_ms(1000);

printf("AT^SISC=0\r");
DELAY_MS(10000);



}
// LEITURA DO AMARELO...........................................................
void leitura(){
//.............................................................................
if(input (INTERMITENTE)){

output_high(led2sinal);

//
}
leitura2();
}

void main(){
 
OUTPUT_LOW(PIN_A5);
DELAY_MS(1000);
OUTPUT_HIGH(PIN_A5);


//set_uart_speed(9600);

   enable_interrupts(INT_RDA);
   enable_interrupts(GLOBAL);
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);  // Configuração do Timer0
   setup_timer_1(T1_DISABLED);               // Configuração do Timer1
   setup_timer_2(T2_DISABLED,0,1);           // Configuração do Timer2
   setup_ccp1(CCP_OFF);                      // Configuração do CCP1
   setup_comparator(NC_NC_NC_NC);            // Configuração dos Comparadores
   setup_vref(FALSE);       // Configuração da Tensão de referência
   
   DELAY_MS(6000);
   //printf("AT+CPIN=5806 \r");
   //DELAY_MS(2000);
   
   // CONFIGURAÇÃO DO MODEM
   printf("AT^SICS=0,conType,GPRS0 \r");
  DELAY_MS(500);
   
   printf("AT^SICS=0,inactTO,6200 \r");
   DELAY_MS(500);
   
   printf("AT^SICS=0,user,vodafone \r");
   DELAY_MS(500);
   
   
   printf("AT^SICS=0,passwd,vodafone \r");
   DELAY_MS(500);
   
   printf("AT^SICS=0,apn,internet.vodafone.pt \r");
   DELAY_MS(500);
   
   
   //ligação
   printf("AT^SISS=0,srvType,socket \r");
   DELAY_MS(500);
   
   printf("AT^SISS=0,conId,0 \r");
   DELAY_MS(500);
   
   printf("AT^SISS=0,alphabet,1 \r");
   DELAY_MS(500);
   
   printf("AT^SISS=0,address,socktcp://88.217.155.226:8189\r");
   DELAY_MS(500);
   
     

   //sinaliza fim de inicialização do modem
output_high(led2sinal);
   delay_ms(1000);
   output_low(led2sinal);
   delay_ms(1000);
   
while (true) {
inicio:
printf("AT^SISC=0\r");
DELAY_MS(10000);
if(!input (power)){
printf("AT^SISC=0\r");
DELAY_MS(10000);
printf("AT^SISO=0\r");
DELAY_MS(5000);
printf("AT^SISW=0,8\r");
delay_ms(1000);

printf("OFF\r");
//delay_ms(1000);

printf("AT^SISC=0\r");
DELAY_MS(10000);


WHILE (TRUE){
if(input (power)){
printf("AT^SISC=0\r");
delay_ms(20000);
goto inicio;
}
}
}
if(input (power)){
z=0;
leitura();
LERSMS();
leitura();
estado();    

// LEITURA DO BUFFER INT
if(a==1){
OUTPUT_HIGH(PIN_B7);
leitura();

}
a=0;
// LEITURA DO BUFFER EM COR
if(b==1){
delay_ms(1000);
printf("AT^SISW=0,8\r");
delay_ms(1000);
printf("COR\r");
delay_ms(1000);
OUTPUT_LOW(PIN_B7);
}
b=0;
}
}
}
             



